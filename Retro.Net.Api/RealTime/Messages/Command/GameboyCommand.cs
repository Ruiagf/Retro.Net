// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gameboy.command.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Retro.Net.Api.RealTime.Messages.Command {

  /// <summary>Holder for reflection information generated from gameboy.command.proto</summary>
  public static partial class GameboyCommandReflection {

    #region Descriptor
    /// <summary>File descriptor for gameboy.command.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameboyCommandReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "ChVnYW1lYm95LmNvbW1hbmQucHJvdG8aHmdhbWVib3kuY29tbWFuZC5tZXNz",
            "YWdlcy5wcm90byJ+Cg5HYW1lQm95Q29tbWFuZBIqCghzZXRTdGF0ZRgBIAEo",
            "CzIWLlNldEdhbWVCb3lDbGllbnRTdGF0ZUgAEjcKC3ByZXNzQnV0dG9uGAIg",
            "ASgLMiAuUmVxdWVzdEdhbWVCb3lKb3lQYWRCdXR0b25QcmVzc0gAQgcKBXZh",
            "bHVlQiqqAidSZXRyby5OZXQuQXBpLlJlYWxUaW1lLk1lc3NhZ2VzLkNvbW1h",
            "bmRiBnByb3RvMw=="));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { global::Retro.Net.Api.RealTime.Messages.Command.GameboyCommandMessagesReflection.Descriptor, },
          new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Command.GameBoyCommand), global::Retro.Net.Api.RealTime.Messages.Command.GameBoyCommand.Parser, new[]{ "SetState", "PressButton" }, new[]{ "Value" }, null, null)
          }));
    }
    #endregion

  }
  #region Messages
  /// <summary>
  /// A command sent from a connected GameBoy client.
  /// </summary>
  public sealed partial class GameBoyCommand : pb::IMessage<GameBoyCommand> {
    private static readonly pb::MessageParser<GameBoyCommand> _parser = new pb::MessageParser<GameBoyCommand>(() => new GameBoyCommand());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<GameBoyCommand> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Command.GameboyCommandReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyCommand() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyCommand(GameBoyCommand other) : this() {
      switch (other.ValueCase) {
        case ValueOneofCase.SetState:
          SetState = other.SetState.Clone();
          break;
        case ValueOneofCase.PressButton:
          PressButton = other.PressButton.Clone();
          break;
      }

      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public GameBoyCommand Clone() {
      return new GameBoyCommand(this);
    }

    /// <summary>Field number for the "setState" field.</summary>
    public const int SetStateFieldNumber = 1;
    /// <summary>
    /// Command to set the state of a GameBoy websocket connection.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Command.SetGameBoyClientState SetState {
      get { return valueCase_ == ValueOneofCase.SetState ? (global::Retro.Net.Api.RealTime.Messages.Command.SetGameBoyClientState) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.SetState;
      }
    }

    /// <summary>Field number for the "pressButton" field.</summary>
    public const int PressButtonFieldNumber = 2;
    /// <summary>
    /// Command to press a button on the GameBoy joypad.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Command.RequestGameBoyJoyPadButtonPress PressButton {
      get { return valueCase_ == ValueOneofCase.PressButton ? (global::Retro.Net.Api.RealTime.Messages.Command.RequestGameBoyJoyPadButtonPress) value_ : null; }
      set {
        value_ = value;
        valueCase_ = value == null ? ValueOneofCase.None : ValueOneofCase.PressButton;
      }
    }

    private object value_;
    /// <summary>Enum of possible cases for the "value" oneof.</summary>
    public enum ValueOneofCase {
      None = 0,
      SetState = 1,
      PressButton = 2,
    }
    private ValueOneofCase valueCase_ = ValueOneofCase.None;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public ValueOneofCase ValueCase {
      get { return valueCase_; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void ClearValue() {
      valueCase_ = ValueOneofCase.None;
      value_ = null;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as GameBoyCommand);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(GameBoyCommand other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (!object.Equals(SetState, other.SetState)) return false;
      if (!object.Equals(PressButton, other.PressButton)) return false;
      if (ValueCase != other.ValueCase) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (valueCase_ == ValueOneofCase.SetState) hash ^= SetState.GetHashCode();
      if (valueCase_ == ValueOneofCase.PressButton) hash ^= PressButton.GetHashCode();
      hash ^= (int) valueCase_;
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (valueCase_ == ValueOneofCase.SetState) {
        output.WriteRawTag(10);
        output.WriteMessage(SetState);
      }
      if (valueCase_ == ValueOneofCase.PressButton) {
        output.WriteRawTag(18);
        output.WriteMessage(PressButton);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (valueCase_ == ValueOneofCase.SetState) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SetState);
      }
      if (valueCase_ == ValueOneofCase.PressButton) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PressButton);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(GameBoyCommand other) {
      if (other == null) {
        return;
      }
      switch (other.ValueCase) {
        case ValueOneofCase.SetState:
          if (SetState == null) {
            SetState = new global::Retro.Net.Api.RealTime.Messages.Command.SetGameBoyClientState();
          }
          SetState.MergeFrom(other.SetState);
          break;
        case ValueOneofCase.PressButton:
          if (PressButton == null) {
            PressButton = new global::Retro.Net.Api.RealTime.Messages.Command.RequestGameBoyJoyPadButtonPress();
          }
          PressButton.MergeFrom(other.PressButton);
          break;
      }

      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            global::Retro.Net.Api.RealTime.Messages.Command.SetGameBoyClientState subBuilder = new global::Retro.Net.Api.RealTime.Messages.Command.SetGameBoyClientState();
            if (valueCase_ == ValueOneofCase.SetState) {
              subBuilder.MergeFrom(SetState);
            }
            input.ReadMessage(subBuilder);
            SetState = subBuilder;
            break;
          }
          case 18: {
            global::Retro.Net.Api.RealTime.Messages.Command.RequestGameBoyJoyPadButtonPress subBuilder = new global::Retro.Net.Api.RealTime.Messages.Command.RequestGameBoyJoyPadButtonPress();
            if (valueCase_ == ValueOneofCase.PressButton) {
              subBuilder.MergeFrom(PressButton);
            }
            input.ReadMessage(subBuilder);
            PressButton = subBuilder;
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
