// <auto-generated>
//     Generated by the protocol buffer compiler.  DO NOT EDIT!
//     source: gameboy.command.messages.proto
// </auto-generated>
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
namespace Retro.Net.Api.RealTime.Messages.Command {

  /// <summary>Holder for reflection information generated from gameboy.command.messages.proto</summary>
  public static partial class GameboyCommandMessagesReflection {

    #region Descriptor
    /// <summary>File descriptor for gameboy.command.messages.proto</summary>
    public static pbr::FileDescriptor Descriptor {
      get { return descriptor; }
    }
    private static pbr::FileDescriptor descriptor;

    static GameboyCommandMessagesReflection() {
      byte[] descriptorData = global::System.Convert.FromBase64String(
          string.Concat(
            "Ch5nYW1lYm95LmNvbW1hbmQubWVzc2FnZXMucHJvdG8iLAoVU2V0R2FtZUJv",
            "eUNsaWVudFN0YXRlEhMKC2Rpc3BsYXlOYW1lGAEgASgJIkcKH1JlcXVlc3RH",
            "YW1lQm95Sm95UGFkQnV0dG9uUHJlc3MSJAoGYnV0dG9uGAEgASgOMhQuR2Ft",
            "ZUJveUpveVBhZEJ1dHRvbiprChNHYW1lQm95Sm95UGFkQnV0dG9uEggKBE5P",
            "TkUQABIGCgJVUBABEggKBERPV04QAhIICgRMRUZUEAMSCQoFUklHSFQQBBIF",
            "CgFBEAUSBQoBQhAGEgkKBVNUQVJUEAcSCgoGU0VMRUNUEAhCKqoCJ1JldHJv",
            "Lk5ldC5BcGkuUmVhbFRpbWUuTWVzc2FnZXMuQ29tbWFuZGIGcHJvdG8z"));
      descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
          new pbr::FileDescriptor[] { },
          new pbr::GeneratedClrTypeInfo(new[] {typeof(global::Retro.Net.Api.RealTime.Messages.Command.GameBoyJoyPadButton), }, new pbr::GeneratedClrTypeInfo[] {
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Command.SetGameBoyClientState), global::Retro.Net.Api.RealTime.Messages.Command.SetGameBoyClientState.Parser, new[]{ "DisplayName" }, null, null, null),
            new pbr::GeneratedClrTypeInfo(typeof(global::Retro.Net.Api.RealTime.Messages.Command.RequestGameBoyJoyPadButtonPress), global::Retro.Net.Api.RealTime.Messages.Command.RequestGameBoyJoyPadButtonPress.Parser, new[]{ "Button" }, null, null, null)
          }));
    }
    #endregion

  }
  #region Enums
  /// <summary>
  /// A button on the GameBoy joypad.
  /// </summary>
  public enum GameBoyJoyPadButton {
    [pbr::OriginalName("NONE")] None = 0,
    [pbr::OriginalName("UP")] Up = 1,
    [pbr::OriginalName("DOWN")] Down = 2,
    [pbr::OriginalName("LEFT")] Left = 3,
    [pbr::OriginalName("RIGHT")] Right = 4,
    [pbr::OriginalName("A")] A = 5,
    [pbr::OriginalName("B")] B = 6,
    [pbr::OriginalName("START")] Start = 7,
    [pbr::OriginalName("SELECT")] Select = 8,
  }

  #endregion

  #region Messages
  /// <summary>
  /// Command to set the state of a GameBoy websocket connection.
  /// </summary>
  public sealed partial class SetGameBoyClientState : pb::IMessage<SetGameBoyClientState> {
    private static readonly pb::MessageParser<SetGameBoyClientState> _parser = new pb::MessageParser<SetGameBoyClientState>(() => new SetGameBoyClientState());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<SetGameBoyClientState> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Command.GameboyCommandMessagesReflection.Descriptor.MessageTypes[0]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGameBoyClientState() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGameBoyClientState(SetGameBoyClientState other) : this() {
      displayName_ = other.displayName_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public SetGameBoyClientState Clone() {
      return new SetGameBoyClientState(this);
    }

    /// <summary>Field number for the "displayName" field.</summary>
    public const int DisplayNameFieldNumber = 1;
    private string displayName_ = "";
    /// <summary>
    /// The new display name associated with the connected GameBoy client.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public string DisplayName {
      get { return displayName_; }
      set {
        displayName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as SetGameBoyClientState);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(SetGameBoyClientState other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (DisplayName != other.DisplayName) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (DisplayName.Length != 0) hash ^= DisplayName.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (DisplayName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(DisplayName);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (DisplayName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DisplayName);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(SetGameBoyClientState other) {
      if (other == null) {
        return;
      }
      if (other.DisplayName.Length != 0) {
        DisplayName = other.DisplayName;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 10: {
            DisplayName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// Command to press a button on the GameBoy joypad.
  /// </summary>
  public sealed partial class RequestGameBoyJoyPadButtonPress : pb::IMessage<RequestGameBoyJoyPadButtonPress> {
    private static readonly pb::MessageParser<RequestGameBoyJoyPadButtonPress> _parser = new pb::MessageParser<RequestGameBoyJoyPadButtonPress>(() => new RequestGameBoyJoyPadButtonPress());
    private pb::UnknownFieldSet _unknownFields;
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pb::MessageParser<RequestGameBoyJoyPadButtonPress> Parser { get { return _parser; } }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public static pbr::MessageDescriptor Descriptor {
      get { return global::Retro.Net.Api.RealTime.Messages.Command.GameboyCommandMessagesReflection.Descriptor.MessageTypes[1]; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    pbr::MessageDescriptor pb::IMessage.Descriptor {
      get { return Descriptor; }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGameBoyJoyPadButtonPress() {
      OnConstruction();
    }

    partial void OnConstruction();

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGameBoyJoyPadButtonPress(RequestGameBoyJoyPadButtonPress other) : this() {
      button_ = other.button_;
      _unknownFields = pb::UnknownFieldSet.Clone(other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public RequestGameBoyJoyPadButtonPress Clone() {
      return new RequestGameBoyJoyPadButtonPress(this);
    }

    /// <summary>Field number for the "button" field.</summary>
    public const int ButtonFieldNumber = 1;
    private global::Retro.Net.Api.RealTime.Messages.Command.GameBoyJoyPadButton button_ = 0;
    /// <summary>
    /// The requested button to press.
    /// </summary>
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public global::Retro.Net.Api.RealTime.Messages.Command.GameBoyJoyPadButton Button {
      get { return button_; }
      set {
        button_ = value;
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override bool Equals(object other) {
      return Equals(other as RequestGameBoyJoyPadButtonPress);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public bool Equals(RequestGameBoyJoyPadButtonPress other) {
      if (ReferenceEquals(other, null)) {
        return false;
      }
      if (ReferenceEquals(other, this)) {
        return true;
      }
      if (Button != other.Button) return false;
      return Equals(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override int GetHashCode() {
      int hash = 1;
      if (Button != 0) hash ^= Button.GetHashCode();
      if (_unknownFields != null) {
        hash ^= _unknownFields.GetHashCode();
      }
      return hash;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public override string ToString() {
      return pb::JsonFormatter.ToDiagnosticString(this);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void WriteTo(pb::CodedOutputStream output) {
      if (Button != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Button);
      }
      if (_unknownFields != null) {
        _unknownFields.WriteTo(output);
      }
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public int CalculateSize() {
      int size = 0;
      if (Button != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Button);
      }
      if (_unknownFields != null) {
        size += _unknownFields.CalculateSize();
      }
      return size;
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(RequestGameBoyJoyPadButtonPress other) {
      if (other == null) {
        return;
      }
      if (other.Button != 0) {
        Button = other.Button;
      }
      _unknownFields = pb::UnknownFieldSet.MergeFrom(_unknownFields, other._unknownFields);
    }

    [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            _unknownFields = pb::UnknownFieldSet.MergeFieldFrom(_unknownFields, input);
            break;
          case 8: {
            button_ = (global::Retro.Net.Api.RealTime.Messages.Command.GameBoyJoyPadButton) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
