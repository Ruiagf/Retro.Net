/**
 * @fileoverview
 * @enhanceable
 * @suppress {messageConventions} JS Compiler reports an error if a variable or
 *     field starts with 'MSG_' and isn't a translatable message.
 * @public
 */
// GENERATED CODE -- DO NOT EDIT!

var jspb = require('google-protobuf');
var goog = jspb;
var global = Function('return this')();

var gameboy_event_messages_pb = require('./gameboy.event.messages_pb.js');
goog.exportSymbol('proto.GameBoyEvent', null, global);

/**
 * Generated by JsPbCodeGenerator.
 * @param {Array=} opt_data Optional initial data array, typically from a
 * server response, or constructed directly in Javascript. The array is used
 * in place and becomes part of the constructed object. It is not cloned.
 * If no data is provided, the constructed object will be empty, but still
 * valid.
 * @extends {jspb.Message}
 * @constructor
 */
proto.GameBoyEvent = function(opt_data) {
  jspb.Message.initialize(this, opt_data, 0, -1, null, proto.GameBoyEvent.oneofGroups_);
};
goog.inherits(proto.GameBoyEvent, jspb.Message);
if (goog.DEBUG && !COMPILED) {
  proto.GameBoyEvent.displayName = 'proto.GameBoyEvent';
}
/**
 * Oneof group definitions for this message. Each group defines the field
 * numbers belonging to that group. When of these fields' value is set, all
 * other fields in the group are cleared. During deserialization, if multiple
 * fields are encountered for a group, only the last value seen will be kept.
 * @private {!Array<!Array<number>>}
 * @const
 */
proto.GameBoyEvent.oneofGroups_ = [[1,2,3,4]];

/**
 * @enum {number}
 */
proto.GameBoyEvent.ValueCase = {
  VALUE_NOT_SET: 0,
  FRAME: 1,
  PUBLISHEDMESSAGE: 2,
  ERROR: 3,
  STATE: 4
};

/**
 * @return {proto.GameBoyEvent.ValueCase}
 */
proto.GameBoyEvent.prototype.getValueCase = function() {
  return /** @type {proto.GameBoyEvent.ValueCase} */(jspb.Message.computeOneofCase(this, proto.GameBoyEvent.oneofGroups_[0]));
};



if (jspb.Message.GENERATE_TO_OBJECT) {
/**
 * Creates an object representation of this proto suitable for use in Soy templates.
 * Field names that are reserved in JavaScript and will be renamed to pb_name.
 * To access a reserved field use, foo.pb_<name>, eg, foo.pb_default.
 * For the list of reserved names please see:
 *     com.google.apps.jspb.JsClassTemplate.JS_RESERVED_WORDS.
 * @param {boolean=} opt_includeInstance Whether to include the JSPB instance
 *     for transitional soy proto support: http://goto/soy-param-migration
 * @return {!Object}
 */
proto.GameBoyEvent.prototype.toObject = function(opt_includeInstance) {
  return proto.GameBoyEvent.toObject(opt_includeInstance, this);
};


/**
 * Static version of the {@see toObject} method.
 * @param {boolean|undefined} includeInstance Whether to include the JSPB
 *     instance for transitional soy proto support:
 *     http://goto/soy-param-migration
 * @param {!proto.GameBoyEvent} msg The msg instance to transform.
 * @return {!Object}
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameBoyEvent.toObject = function(includeInstance, msg) {
  var f, obj = {
    frame: (f = msg.getFrame()) && gameboy_event_messages_pb.GameBoyGpuFrame.toObject(includeInstance, f),
    publishedmessage: (f = msg.getPublishedmessage()) && gameboy_event_messages_pb.GameBoyPublishedMessage.toObject(includeInstance, f),
    error: (f = msg.getError()) && gameboy_event_messages_pb.GameBoyServerError.toObject(includeInstance, f),
    state: (f = msg.getState()) && gameboy_event_messages_pb.GameBoyClientState.toObject(includeInstance, f)
  };

  if (includeInstance) {
    obj.$jspbMessageInstance = msg;
  }
  return obj;
};
}


/**
 * Deserializes binary data (in protobuf wire format).
 * @param {jspb.ByteSource} bytes The bytes to deserialize.
 * @return {!proto.GameBoyEvent}
 */
proto.GameBoyEvent.deserializeBinary = function(bytes) {
  var reader = new jspb.BinaryReader(bytes);
  var msg = new proto.GameBoyEvent;
  return proto.GameBoyEvent.deserializeBinaryFromReader(msg, reader);
};


/**
 * Deserializes binary data (in protobuf wire format) from the
 * given reader into the given message object.
 * @param {!proto.GameBoyEvent} msg The message object to deserialize into.
 * @param {!jspb.BinaryReader} reader The BinaryReader to use.
 * @return {!proto.GameBoyEvent}
 */
proto.GameBoyEvent.deserializeBinaryFromReader = function(msg, reader) {
  while (reader.nextField()) {
    if (reader.isEndGroup()) {
      break;
    }
    var field = reader.getFieldNumber();
    switch (field) {
    case 1:
      var value = new gameboy_event_messages_pb.GameBoyGpuFrame;
      reader.readMessage(value,gameboy_event_messages_pb.GameBoyGpuFrame.deserializeBinaryFromReader);
      msg.setFrame(value);
      break;
    case 2:
      var value = new gameboy_event_messages_pb.GameBoyPublishedMessage;
      reader.readMessage(value,gameboy_event_messages_pb.GameBoyPublishedMessage.deserializeBinaryFromReader);
      msg.setPublishedmessage(value);
      break;
    case 3:
      var value = new gameboy_event_messages_pb.GameBoyServerError;
      reader.readMessage(value,gameboy_event_messages_pb.GameBoyServerError.deserializeBinaryFromReader);
      msg.setError(value);
      break;
    case 4:
      var value = new gameboy_event_messages_pb.GameBoyClientState;
      reader.readMessage(value,gameboy_event_messages_pb.GameBoyClientState.deserializeBinaryFromReader);
      msg.setState(value);
      break;
    default:
      reader.skipField();
      break;
    }
  }
  return msg;
};


/**
 * Serializes the message to binary data (in protobuf wire format).
 * @return {!Uint8Array}
 */
proto.GameBoyEvent.prototype.serializeBinary = function() {
  var writer = new jspb.BinaryWriter();
  proto.GameBoyEvent.serializeBinaryToWriter(this, writer);
  return writer.getResultBuffer();
};


/**
 * Serializes the given message to binary data (in protobuf wire
 * format), writing to the given BinaryWriter.
 * @param {!proto.GameBoyEvent} message
 * @param {!jspb.BinaryWriter} writer
 * @suppress {unusedLocalVariables} f is only used for nested messages
 */
proto.GameBoyEvent.serializeBinaryToWriter = function(message, writer) {
  var f = undefined;
  f = message.getFrame();
  if (f != null) {
    writer.writeMessage(
      1,
      f,
      gameboy_event_messages_pb.GameBoyGpuFrame.serializeBinaryToWriter
    );
  }
  f = message.getPublishedmessage();
  if (f != null) {
    writer.writeMessage(
      2,
      f,
      gameboy_event_messages_pb.GameBoyPublishedMessage.serializeBinaryToWriter
    );
  }
  f = message.getError();
  if (f != null) {
    writer.writeMessage(
      3,
      f,
      gameboy_event_messages_pb.GameBoyServerError.serializeBinaryToWriter
    );
  }
  f = message.getState();
  if (f != null) {
    writer.writeMessage(
      4,
      f,
      gameboy_event_messages_pb.GameBoyClientState.serializeBinaryToWriter
    );
  }
};


/**
 * optional GameBoyGpuFrame frame = 1;
 * @return {?proto.GameBoyGpuFrame}
 */
proto.GameBoyEvent.prototype.getFrame = function() {
  return /** @type{?proto.GameBoyGpuFrame} */ (
    jspb.Message.getWrapperField(this, gameboy_event_messages_pb.GameBoyGpuFrame, 1));
};


/** @param {?proto.GameBoyGpuFrame|undefined} value */
proto.GameBoyEvent.prototype.setFrame = function(value) {
  jspb.Message.setOneofWrapperField(this, 1, proto.GameBoyEvent.oneofGroups_[0], value);
};


proto.GameBoyEvent.prototype.clearFrame = function() {
  this.setFrame(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameBoyEvent.prototype.hasFrame = function() {
  return jspb.Message.getField(this, 1) != null;
};


/**
 * optional GameBoyPublishedMessage publishedMessage = 2;
 * @return {?proto.GameBoyPublishedMessage}
 */
proto.GameBoyEvent.prototype.getPublishedmessage = function() {
  return /** @type{?proto.GameBoyPublishedMessage} */ (
    jspb.Message.getWrapperField(this, gameboy_event_messages_pb.GameBoyPublishedMessage, 2));
};


/** @param {?proto.GameBoyPublishedMessage|undefined} value */
proto.GameBoyEvent.prototype.setPublishedmessage = function(value) {
  jspb.Message.setOneofWrapperField(this, 2, proto.GameBoyEvent.oneofGroups_[0], value);
};


proto.GameBoyEvent.prototype.clearPublishedmessage = function() {
  this.setPublishedmessage(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameBoyEvent.prototype.hasPublishedmessage = function() {
  return jspb.Message.getField(this, 2) != null;
};


/**
 * optional GameBoyServerError error = 3;
 * @return {?proto.GameBoyServerError}
 */
proto.GameBoyEvent.prototype.getError = function() {
  return /** @type{?proto.GameBoyServerError} */ (
    jspb.Message.getWrapperField(this, gameboy_event_messages_pb.GameBoyServerError, 3));
};


/** @param {?proto.GameBoyServerError|undefined} value */
proto.GameBoyEvent.prototype.setError = function(value) {
  jspb.Message.setOneofWrapperField(this, 3, proto.GameBoyEvent.oneofGroups_[0], value);
};


proto.GameBoyEvent.prototype.clearError = function() {
  this.setError(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameBoyEvent.prototype.hasError = function() {
  return jspb.Message.getField(this, 3) != null;
};


/**
 * optional GameBoyClientState state = 4;
 * @return {?proto.GameBoyClientState}
 */
proto.GameBoyEvent.prototype.getState = function() {
  return /** @type{?proto.GameBoyClientState} */ (
    jspb.Message.getWrapperField(this, gameboy_event_messages_pb.GameBoyClientState, 4));
};


/** @param {?proto.GameBoyClientState|undefined} value */
proto.GameBoyEvent.prototype.setState = function(value) {
  jspb.Message.setOneofWrapperField(this, 4, proto.GameBoyEvent.oneofGroups_[0], value);
};


proto.GameBoyEvent.prototype.clearState = function() {
  this.setState(undefined);
};


/**
 * Returns whether this field is set.
 * @return {!boolean}
 */
proto.GameBoyEvent.prototype.hasState = function() {
  return jspb.Message.getField(this, 4) != null;
};


goog.object.extend(exports, proto);
